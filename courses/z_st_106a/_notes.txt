********************
*** Lecture Four ***
********************
--> source code --> object code

Simple way (c, c++)
source file --> compiler --> object file and libraries (object code) --> linker --> executable file

Java way
sorce file --> compiler --> class file and libraries (java byte code) --> linker --> JAR --> JVM

JVM understands java byte code and run it like object code


********************
*** Lecture Five ***
********************

** Primitive types **
int     - integer
double  - real-value
boolean - logical value
char    - character

The object is the receiver. We just send a message to the receiver, when we call method.

** Graphics World **
(0,0) start top left.

** Methods of GObject Class **
object.setColor(color)
object.setLocation(x, y)
object.move(dx, dy)

The standard colors names are defined in java.awt package:
Color.BLACK ... Color.WHITE

new GLabel(text, x, y)
label.setFont(font) where font = "family-style-size" (style = [PLAIN, BOLD, ITALIC, BOLDITALIC])

new GRect(x, y, width, height)
new GOval(x, y, width, height)
new GLine(x1, y1, x2, y2)

For GRect and GOval you can do
object.setFilled(fill), where fill is true or false
object.setFillColor(color)

** GraphicsProgram methods **
getWidth()
getHeight()


*******************
*** Lecture Six ***
*******************
Let's make a constant

private static final double PI = 3.14;

Java optimizes evaluations. It's called Short Circuit Evaluation.
p = (5 > 3) || (4 <= 2); // In this case (4 <= 2) is just don't evaluated.

Scope is a lifetime of variable =)

Using switch statement a value MUST be an integer value. As far as I remember it's not as hard in modern version of java.


*********************
*** Lecture Seven ***
*********************
While using cast ((int), (double)) if you loosing information (double -> int), you should use cast.
* Methods *
calling     -- receiver.name(arguments)
defining    -- visibility type name(parameters)

visibility -- private (only methods inside a class), public (all the others)
type        -- return type (where "void" is a special type)

predicate methods - those, that return boolean


*********************
*** Lecture Eight ***
*********************
Toaster is a method. Little people eat bread and excrement the toasts.

!! Constants are declared on the top, but instance variables are declared on the bottom !!


********************
*** Lecture Nine ***
********************


*******************
*** Lecture Ten ***
*******************


**********************
*** Lecture Eleven ***
**********************


**********************
*** Lecture Twelve ***
**********************
** Enumeration ** o_O

** Char **
char ch = 'a'; // !! Single Quotes !! and one symbol

!! chars can be compared !!:
    ch >= 'A' && ch <= 'Z'
!! chars can be added and subtracted !!!!!:
    (ch - 'A') + 'a'  ==>> from uppercase to lower case
!! and for cycles too !!:
    for (char ch = 'a'; ch <= 'z'; ch++) {}

** String **
str1 == str2 is wrong! it returns true if str1 and str2 are the same object
str1.equals(str2) is right


************************
*** Lecture Thirteen ***
************************


************************
*** Lecture Fourteen ***
************************
** Memory **
bit:    0 or 1
byte:   8 bits 0-255
word:   4 bytes

Tera, Peta, Exa, Zetta, Yotta bytes

** Memory Places **
Static variables (constants)    # Special
Dynamic variables               # Heap
Local variables                 # Stack

        __________
1000    | Static |
        ----------
        
        __________
2000    |  Heap  |              # Somewhere after static
        ----------              # and allocates down
            |
            V
and when they meet, really bad things happen
            ^
            |
        __________
FFFF    | Stack  |              # Somewhere on high address
        ----------              # and allocates up


int     4 bytes
char    2 bytes / 4 bytes


************************
*** Lecture Fifteen ***
************************
** Some more on Memory **
int, double, char, boolean      # Primitive types, they are copied, pass by value
object                          # They are passed by reference

primitive    class
int         Integer
double      Double
boolean     Boolean
char        Character
but even classes are still immutable

** Exceptions **
try {

} catch {

}


***********************
*** Lecture Sixteen ***
***********************
** Arrays **
- ordered
- homogeneous

int[] myArr = new int[5];       # array of 5 ints

Actual size (declared)  /  Effective (really using)


*************************
*** Lecture Seventeen ***
*************************


************************
*** Lecture Eighteen ***
************************
** Debugging **
    Design      - Architect |
    Coding      - Engineer  | 10x harder to fix a mistake than on design level
    Testing     - Vandals   | 10x -||_ coding level
    Debugging   - Detective | 10x -||- testing level
    Deployment  - Shipman   | 10x -||- debugging level


************************
*** Lecture Nineteen ***
************************
** Interface **
    - Set of methods
    - Common functionality among set of classes


**********************
*** Lecture Twenty ***
**********************


**************************
*** Lecture Twenty One ***
**************************


**************************
*** Lecture Twenty Two ***
**************************


****************************
*** Lecture Twenty Three ***
****************************
Searching
    - Linear search     O(n)
    - Binary search     O(log2(n))
Sorting
    Selection sort      O(n2)
    Radix sort

***************************
*** Lecture Twenty Four ***
***************************
** Data Structures **
* Principles *
    Nouns   -> Classes
    Verbs   -> Methods

    Unique identifiers
* Design *
    Collection of object

***************************
*** Lecture Twenty Five ***
***************************
** Concurrency **
* Thread *
Each class that implements a Runnable interface can be run in thread
"spawn a thread"
And we can have a share data


**************************
*** Lecture Twenty Six ***
**************************
** Standard Java **
public static void main(String[] args) {}
just to maximize the portability


****************************
*** Lecture Twenty Seven ***
****************************
Possible further courses:
    CS 103 Discrete Math
    CS 103 Discrete Math

    CS 107 Low level programming
    CS 108 OO Systems

    CS 140 Operational Systems
    CS 161 Data Structures

****************************
*** Lecture Twenty Eight ***
****************************
