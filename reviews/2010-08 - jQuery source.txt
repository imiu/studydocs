*******************************************************************************
***             10 Things I Learned from the jQuery Source                  ***
***     Based on Screencast by Paul Irish (http://vimeo.com/12529436)       ***
*******************************************************************************
Self Executing function, those parenthesizes are absolutely optional
(function(){})()

in Facebook they use
!function(){}()


(function(window, document, undefined){

})(this, document)
Those parameters are serving two things.
    1) They will be optimally minimized with any js compressor (function(A, B, C){B.getElementById})()
    2) undefined will be really undefined =)



** SetTimeout with SE functions **
// This will call doStuff() function every 100ms, disregarding if it's finished operations or not, and can be caught in a very tough position with concurrent calls to the same stuff
setInterval(function(){
    doStuff();
}, 100);

// This will call doStuff() and setTimeout for outer function right after the function finished to to it's stuff
(function(){
    doStuff();
    setTimeout(arguments.callee, 100);
});

// In ECMAScript 5 strict mode, arguments.callee is deprecated, so we'll use a named function. And callee is bit slower, than our named function
(function loop_loop(){
    doStuff();
    setTimeout(loop_loop, 100);
});

// We can do a asynchronous recursion, so it keeps updating this element forever
(function loop_loop(){
    $('#update).load('somepage.php', function() {
        loop_loop();
    });
});



** Aliases for DOM attributes **
There is a nifty way to have an alias on a very long DOM attribute. And it's called jQuery.props. It's a small dictionary, that maps 'class' => 'className' and 'colspan' => 'calSpan', and use them when $('#elem').attr('class') is called. So we might add some our stuff to it.
jQuery.props['ad'] = 'aria-disabled';
$('#elem').attr('ad') // and we got our 'aria-disabled'



** Animation speed **
Another dictionary with values
speeds : {
    slow: 600,
    fast: 100,
    _default: 400
}
So anytime you pass a 'normal' or 'goodone' speed in fadeIn, it just evaluates to _default.
And by the way, in IE < 8 animation can be jerky. To fix it, just adjust a speed twice, so make it slower, but more compatible to other browsers. Just like this:
jQuery.fx.speeds._default = ($.browser.msie && $.browser.version < 8) ? 800 : 400;



** Some stuff on selectors **
$('#id').find('tag.thing')  // is faster, than
$('#id tag.thing')          // this.

$('input:password')         // is faster, than
$(':password')              // this.



** Parsing JSON **
First of all, we have native window.JSON.parse for IE8+, FF3.5+, Safari & Chrome, so we'd better use them.
var x = window.JSON.parse( data );          // Very native!
var x = (new Function("return " data))();   // Very beautiful! And no evil with eval()


*** Tips & Tricks ***
1) Detach DOM elements from tree, while playing with them
var table = $('#some_table');
var parent = table.parent();
table.detach();
table.addLotsAndLotsOfRows();
parent.append(table);

2) Put the most concrete selectors on the left.

3) Stick with delegate() instead of live()

4) Present at least an element type for a filter