*******************************************************************************
***                         Resig on JavaScript                             ***
***                        Based on different talks                         ***
*******************************************************************************

*******************************
** JavaScript & jQuery @ ACM **
*******************************
http://www.youtube.com/watch?v=GKfHdOrR3lw

[].join.call("test", " ") == "t e s t"

** Currying **
Function.prototype.curry = function() {
    var fn = this,
        args = Array.prototype.slice.call(arguments);
    return function() {
        return fn.apply(this, args.concat(Array.prototype.slice.call(arguments)));
    };
};

String.prototype.csv = String.prototype.split.curry(/, \s*/);
var results = ("John, Resig, Boston").csv();

results[1] == "Resig";


********************************************************
** Search for Drop-in JavaScript Performance @ Google **
********************************************************
http://www.youtube.com/watch?v=13-3VMzfU3Y

JavaScript Engines
    Firefox:    TraceMonkey
    Safari:     SquirrelFish
    Chrome:     V8

Common features of Engines:
    Virtual Machines
        Optimized to run a JavaScript-specific bytecode
    Shaping
        Determine if two objects are similar
        Optimize behavior based upon that

Engine Layers
    JavaScript Code
    JavaScript Engine (C++)
    ByteCode (virtual machine)
    Machine code

TraceMonkey
    SpiderMonkey + Tracing technology to optimize the repeating patterns
    Function Inlining (strip away as much as possible)

SquirrelFish
    Just-in-time compilation for JavaScript
    Compiles a bytecode for common functionality
    Specialties:
        Bytecode for regular expressions (super-fast)

V8
    Makes extensive use of shaping (fast property lookups)
    Hyper-optimized function calls and recursion
    Dynamic machine code generation

DOM Navigation
    getElementByClassName - almost everywhere and dramatically fast
    Selector API (querySelectorAll) - in specs and every browser
    Traversal API - only in FF by now

Drag and Drop
    HTML5 dragging - only in FF

JavaScript Threads
    webWorkers - up to 10 times faster when good parallel algorithm is introduced

Styling
    Rounded corners
    Shadows on boxes and table cells
    Custom fonts
    Rotations, scaling and offset elements

Canvas
    Works in all browsers (IE with ExCanvas)
    Images, other canvases (and video later) can be consumed by canvas
    It's like paint, so to animate, we have to repaint all

Data Manipulation
    SQL Storage (only in WebKit now)
    Native JSON support (dramatically faster)


********************************************************
**     Best Practices in JavaScript Library Design    **
********************************************************
http://www.youtube.com/watch?v=0LKDImgRfrg

Need to know to write a solid library
    Writing a Solid API
    Implementation
    Complex Applications
    Browser Bugs
    Documentation
    Testing
    Maintenance


Writing a Solid API
    Orthogonal (CRUD etc.)
    Fear adding methods to API
    Embrace removing code
    Consistency
    Namespacing
    Don't extend native objects
    Perform Type Checking

Complex Applications
    Extensibillity

