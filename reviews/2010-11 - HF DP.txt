*******************************************************************************
***                       Head First Design Patterns                        ***
***                        Based on a O'Reilly book                         ***
*******************************************************************************

***********************
** Design Principles **
***********************
1) Identify the aspects of your application that vary and separate them from what stays the same.
2) Program to an interface, no an implementation.
3) Favor composition over inheritance.
4) Strive for loosely coupled designs between objects that interact.
5) Classes should be open for extension but closed for modification.
6) Depend upon abstractions. Do not depend upon concrete classes.
7) Principle of Least Knowledge - talk only to your immediate friends.
8) Don't call us, we'll call you.
9) A class should have only one reason to change.

*********************
** Design Patterns **
*********************
* Strategy *
This pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

* Observer *
This pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

* Decorator *
This pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.

* Factory Method *
This pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.

* Abstract Factory *
This pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.

* Singleton *
This pattern ensures a class has only one instance, and provides a global point of access to it.

* Command *
This pattern encapsulates a request as an object, thereby letting you parametrize other objects with different requests, queue or log requests, and support undoable operations.

* Adapter *
This pattern converts the interface of a class into another interface the clients expect. Adapters lets classes work together that couldn't otherwise because of incompatible interfaces.

* Facade *
This pattern provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.

* Template Method *
This pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.

* Iterator *
This pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.

* Composite *
This pattern allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.

* State *
This pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.

* Proxy *
The pattern provides a surrogate or placeholder for another object to control access to it.

* Bridge *
Vary implementations and abstractions simultaneously.

* Builder *
Encapsulate the construction of a product and allow it to be constructed in steps.

* Chain of Responsibility *
Use it when you want to give more than one object a chance to handle a request.

* Flyweight *
Use it when one instance of a class can be used to provide many "virtual instances".

* Interpreter *
Use it to build an interpreter for a language.

* Mediator *
Use it to centralize complex communications and control between related objects.

* Memento *
Use it when you need to be able to return an object to one of tis previous states; for instance, if your user requests an "undo".

* Prototype *
Use it when creating an instance of a given class is either expensive or complicated.

* Visitor *
Use it when you want to add capabilities to a composite of objects and encapsulation is not important.