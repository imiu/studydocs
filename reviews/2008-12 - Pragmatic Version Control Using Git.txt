*****************************************
***          Pragmatic Git            ***
***     Based on PragProg book        ***
*****************************************


---~~~=== 2. Setting Up Git ===~~~---
git config --global user.name "Alexander Kudryashov"        # Setting up name
git config --global user.email "alex.kudryashov@gmail.com"  # Setting up email
git config --global --list                                  # View all the variables
git help clone                                              # Get help on clone command
git config --global alias.ci "commit"                       # Set an svn-like alias for commit
GIT_EDITOR                                                  # Variable to set in .profile to create comments in commit by exact editor

---~~~=== 2. Creating Your First Project ===~~~---
git init                            # Create a repo                   
git add file.txt                    # Add a file to track into a repo 
git commit -m                       # Commit changes to repo          
git commit -a                       # Commit all files git know already, but not the new ones
git status                          # View the status of working tree 
git log -1(2,3)                     # View last 1(2,3) changes in repo
git log --pretty=oneline            # View more clear and shortLined log
git branch branch_to branch_from    # Crate a branch named branch_to from the branch_from
git checkout branch_to              # Switch current branch to branch_to
git tag                             # Show all the tags, that exist in repo
git tag tag_name branch_name        # Set a tag on branch_name called tag_name
git rebase branch_name              # Merge all from branch_name into current branch
git branch -d branch_name           # Delete branch_name
git clone git://hub/a/b.git git_cp  # Clone remote repo into git_cp


---~~~=== 4. Adding and Committing: Git Basics ===~~~---
git add -i                          # Launches interactive mode. Everything can be made from it
git add -p                          # Show patch that will be applied when adding
git diff HEAD                       # See the difference between current working tree and a repo
git mv old_file.txt new_file.txt    # Rename the file


---~~~=== 5. Understanding and Using Branches ===~~~---
git branch -m master mymaster       # Rename the master branch to mymaster
git branch new_branch               # Create a new branch
git checkout new_branch             # Switch to new_branch
git checkout -b alt master          # Create a branch alt from master branch and switch to it immediately
git merge alt                       # Merge branch called alt to current branch
git merge --squash alt              # Take all the commits from alt and merge into current branch as one commit
git cherry-pick 34ff33f             # Merge only one commit into current branch (-n will add multiple commits at once)
git mergetool                       # Looking for a gui merge tool (kdiff2, ...) to solve the conflict on merge
git branch -d alt                   # Delete alt branch


---~~~=== 6. Git History ===~~~---
See what have been done and when
git log --sinse="5 hours"           # commits done in last 5 hours
git log --before="5 hours"          # commits done 5 and more hours before
git log --oneline                   # shortcut to --pretty="oneline"
git log 18f82e..                    # from 18f82e to HEAD revision
git log HEAD^                       # HEAD-1 (^^ - HEAD-2, etc.) and lower
git log HEAD~1                      # Same as HEAD^
git log HEAD~2..                    # From HEAD-2 to HEAD
git log --oneline --graph --all     # Show a beautiful graph of the tree with all branches
git log --stat                      # Statistic on what files were changes

See what have been done exactly and by whom
git diff                            # show difference of current tree and HEAD
git diff --stat                     # what file were modified and how hardly
git blame file                      # show all lines of file with author of these lines
git blame -L 12,13 file             # show lines 12 and 13 of flie
git blame -L 12,+(-)10 file         # show lines 12 and 10 lines after(before)
git blame -L "/<html>/",+2 -- file  # using regular expression to find the needed line
git blame -C -C copied_file         # to find out if this file content was copied from other file

Rewriting History
git commit --amend                  # to rewrite last commit in case of misprint or so
git revert HEAD                     # revert last commit and commit (unable to undo!)
git revert -n HEAD                  # revert last commit and wait for commit (in case you need revert some more)
git reset HEAD^                     # reset 1 commit (revert undo the changes, and reset undo the commit)

Reordering commits
git rebase -i HEAD~3                # rebase last 3 commits (use reorder lines, squash to merge commits and edit to break commit into severals)
git rebase --continue               # to finish rebase after editing


---~~~=== 7. Remote Repositories ===~~~---
Few words about repository access.
git     - for speed and stay anonimous
ssh     - for secure and with logins
https   - to bypass firewalls
Optimal is git for read and ssh for write.

Cloning remote repository
git clone git://github.com/repo.git # Clone repository from github
git branch -r                       # Shows remote branches (while "git branch" shows only local ones)
git fetch                           # Updates remote branches of local copy
git pull                            # Updates and merge local branches of local copy
git push                            # Pushes current local branch to origin branch of remote repository
git push --dry-run                  # Show what files will be pushed without really pushing them
git push git://... HEAD             # To push local HEAD branch (may be tag or branch too) into remote repository
git remote add origin git://...     # To add remote repository to push in, if started local repository with init, instead of clone
git remote add alias_name git://... # To add some repository, which you wish to push or pull with this alias (git pull alias_name HEAD)


---~~~=== 8. Organizing the Repository ===~~~---
Tags
git tag                             # See all current tags
git tag tag_name                    # Create a new tag tag_name (tag_name must be one word, with no spaces) from current commit of current branch
git tag tag_name branch_name        # Create a tag tag_name from branch branch_name
git tag -a tag_name branch_name     # Is a correct way of tagging
git co tag_name                     # Checkout the tag. It means that you are out of any current branhces
git co -b branch_name               # Create a branch branch_name of checkouted tag
git co -b branch_name tag_name      # Checkout and create a branch branch_name from a tag tag_name (two previous commands combined in one)


---~~~=== 9. Beyond the Basics ===~~~---
git gc                              # Should be run after ~100 commits to optimize the repository
git gc --aggressive                 # Can really downsize big repos
git archive --format=tar --prefix=folder_name HEAD | bzip2 > project.tar.bz2
git bisect			                # Helps find out in what commit the bug was introduced


---~~~=== 10. Migrating to Git ===~~~---
git svn clone  -s svn://svnrepo/project # Copy the svn repo
git svn rebase                          # Fetches all the changes from svn repo and merge them into current git repo
git svn dcommit                         # Pushes every git commit into svn. Adding -n will make a "dry run"

---~~~====================~~~---
---~~~=== 00. Practice ===~~~---
---~~~====================~~~---
touch .gitignore                        # Creating a file with list of files not to track by git
git rm file_name                        # Remove file from tracking in repo
git commit -v                           # Shows diff in commit text
git remote add rname git@ab.ru:git.git  # Add remote repo called rname with further commits like
git push rname master                   # for pushing our master branch into the remote repo
git branch -r                           # Show remote branches
git branch -a                           # Show remote and local branches
git push origin :newfeature             # Delete a branch newfeature from origin
git cherry somebranch                   # Will show all commits that are in current branch, but not in somebranch
git show HEAD~4:index.html              # Show index.html right from 4 commits before HEAD
git update-index --assume-unchanged fn  # Set fn as unchanged and prevent it from commit
git update-index --no-assume-unchanged fn # Unset the previous rule
git whatchanged -n 1                    # Shortcut to show all files had beed changed and a commit message
git shortlog                            # Show commits on persons, -s - shows only number of them, -n - sort by number
git push origin :refs/tags/some         # Delete tag on origin

### Git diff ###
git diff --cached                       # Shows diff between all in your repo and your index, while
git diff                                # Shows you diff between your current state and your index
git diff HEAD                           # Shows you all diffs between your repo and index+working tree
git diff master~3                       # Shows diff between wc and repo-3 commits ago
git diff master~3 -- path/to/file       # Shows diff between wc and repo-3 for exact file
git diff master~5 master~3              # Shows diff between to previous commits, file goes here as well
git diff master~5 --stat                # Shows only stat on files, to specify them later
git diff master~5 --name-status         # Shows only M, A etc. on file names
git diff master~5 --numstat             # Shows number of lines added and removed in files

git diff stash@{0}                      # Show diff with stash{0}

### Git stash ###
git stash                               # Put on a stack all uncommitted changes for further apply
git stash save "message"                # Put on a stack with a message
git stash list                          # Show the stack of stash
git stash apply                         # Take the last added stash and apply it to the wt
git stash pop                           # Apply and delete last added stash
git stash drop <id>                     # Delete named stash
git stash clean                         # Delete all stashes

### Getting git code completion on os x ###
1) git clone git://git.kernel.org/pub/scm/git/git.git git
2) cp git/contrib/completion/git-completion.bash ~/.git-completion.bash
3) Add "source ~/.git-completion.bash" to the .profile
4) . ~/.profile
5) Add "export GIT_PS1_SHOWDIRTYSTATE=1" to the .profile to show status in bash-line.
5) Add "export PS1='\w$(__git_ps1 "(%s)")$ '" to the .profile to show branch in bash-line.

### List of useful aliases ###
alias gst='git status'
alias ga='git add'
alias gaa='git add .'
alias gc='git commit -v'
alias gca='git commit -a -v'
alias gc='git checkout'
alias gcb='git checkout -b'
alias gb='git branch'
alias gba='git branch -a'
alias gd='git diff | mate'

### To avoid problems on pull add this to .git/config ###
[branch "master"]
    remote = origin
    merge = refs/heads/master

### To avoid problems on push ###
git config --global push.default matching

### Track remote branch ###
git branch --track name origin/name

### Real remove of ignored file ###
git filter-branch --index-filter 'git rm --cached <file>' HEAD

### NCurses-Git ###
tig

### Conflicts on merge ###
git checkout --ours filename            # left our version of file
git checkout --theirs filename          # left someone version of file

